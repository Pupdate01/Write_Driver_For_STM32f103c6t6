
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000740  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000870  08000878  00001878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000870  08000870  00001878  2**0
                  CONTENTS
  4 .ARM          00000000  08000870  08000870  00001878  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000870  08000878  00001878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000870  08000870  00001870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000874  08000874  00001874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000878  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000878  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000865  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002c3  00000000  00000000  00002106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  000023d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008b  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001fde  00000000  00000000  00002523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001001  00000000  00000000  00004501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008bc1  00000000  00000000  00005502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000e0c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0000e108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0000e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000858 	.word	0x08000858

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000858 	.word	0x08000858

08000170 <delay>:

#define HIGH 		1
#define LOW 		0
#define BTN_PRESSED	LOW

void delay(void){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	// set delay 200ms
	for(uint32_t i = 0 ; i < 500000/2 ;i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a04      	ldr	r2, [pc, #16]	@ (8000198 <delay+0x28>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d9f8      	bls.n	800017c <delay+0xc>
}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	0003d08f 	.word	0x0003d08f

0800019c <main>:

int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GPIOLed;
	memset(&GPIOBtn,0,sizeof(GPIOBtn)); //clear GPIOBtn
 80001a2:	f107 0308 	add.w	r3, r7, #8
 80001a6:	2208      	movs	r2, #8
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 fb28 	bl	8000800 <memset>
	memset(&GPIOLed,0,sizeof(GPIOLed));	//clear GPIOLed
 80001b0:	463b      	mov	r3, r7
 80001b2:	2208      	movs	r2, #8
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 fb22 	bl	8000800 <memset>

	//Configure GPIO led  PA4 for output push-pull mode
	GPIOLed.pGPIOx = GPIOA;
 80001bc:	4b13      	ldr	r3, [pc, #76]	@ (800020c <main+0x70>)
 80001be:	603b      	str	r3, [r7, #0]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4 ;
 80001c0:	2304      	movs	r3, #4
 80001c2:	713b      	strb	r3, [r7, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode	  = GPIO_MODE_OUT_10MHz;
 80001c4:	2301      	movs	r3, #1
 80001c6:	717b      	strb	r3, [r7, #5]
	GPIOLed.GPIO_PinConfig.GPIO_CNF		  = GPIO_GP_OP_PP;
 80001c8:	2300      	movs	r3, #0
 80001ca:	71bb      	strb	r3, [r7, #6]

	//Configure GPIO button PA6 for input pull up pull down mode
	GPIOBtn.pGPIOx = GPIOA;
 80001cc:	4b0f      	ldr	r3, [pc, #60]	@ (800020c <main+0x70>)
 80001ce:	60bb      	str	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6 ;
 80001d0:	2306      	movs	r3, #6
 80001d2:	733b      	strb	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode	  = GPIO_MODE_IT_FT;
 80001d4:	2304      	movs	r3, #4
 80001d6:	737b      	strb	r3, [r7, #13]
	GPIOBtn.GPIO_PinConfig.GPIO_CNF		  = GPIO_IP_PUPD;
 80001d8:	2302      	movs	r3, #2
 80001da:	73bb      	strb	r3, [r7, #14]

	//Enable GPIOA
	GPIO_PeriClockControl(GPIOA, ENABLE);
 80001dc:	2101      	movs	r1, #1
 80001de:	480b      	ldr	r0, [pc, #44]	@ (800020c <main+0x70>)
 80001e0:	f000 f850 	bl	8000284 <GPIO_PeriClockControl>

	//init GPIO led and button
	GPIO_Init(&GPIOBtn);
 80001e4:	f107 0308 	add.w	r3, r7, #8
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 f903 	bl	80003f4 <GPIO_Init>
	GPIO_Init(&GPIOLed);
 80001ee:	463b      	mov	r3, r7
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 f8ff 	bl	80003f4 <GPIO_Init>

	//IRQ configure
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRIO15);
 80001f6:	210f      	movs	r1, #15
 80001f8:	2017      	movs	r0, #23
 80001fa:	f000 fab7 	bl	800076c <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 80001fe:	2101      	movs	r1, #1
 8000200:	2017      	movs	r0, #23
 8000202:	f000 fa2f 	bl	8000664 <GPIO_IRQInterruptConfig>

 	while(1);
 8000206:	bf00      	nop
 8000208:	e7fd      	b.n	8000206 <main+0x6a>
 800020a:	bf00      	nop
 800020c:	40010800 	.word	0x40010800

08000210 <EXTI9_5_IRQHandler>:
	return 0;
}

void EXTI9_5_IRQHandler(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	delay();
 8000214:	f7ff ffac 	bl	8000170 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 8000218:	2006      	movs	r0, #6
 800021a:	f000 fad1 	bl	80007c0 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_4);
 800021e:	2104      	movs	r1, #4
 8000220:	4802      	ldr	r0, [pc, #8]	@ (800022c <EXTI9_5_IRQHandler+0x1c>)
 8000222:	f000 fa0b 	bl	800063c <GPIO_ToggleOutputPin>
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40010800 	.word	0x40010800

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	@ (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000234:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480c      	ldr	r0, [pc, #48]	@ (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490d      	ldr	r1, [pc, #52]	@ (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0d      	ldr	r2, [pc, #52]	@ (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0a      	ldr	r4, [pc, #40]	@ (800027c <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025e:	f000 fad7 	bl	8000810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f7ff ff9b 	bl	800019c <main>

08000266 <LoopForever>:

LoopForever:
  b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000274:	08000878 	.word	0x08000878
  ldr r2, =_sbss
 8000278:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800027c:	2000001c 	.word	0x2000001c

08000280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC1_2_IRQHandler>
	...

08000284 <GPIO_PeriClockControl>:
 * @return						- none
 *
 * @Note						- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi )
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	460b      	mov	r3, r1
 800028e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000290:	78fb      	ldrb	r3, [r7, #3]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d14c      	bne.n	8000330 <GPIO_PeriClockControl+0xac>
		if(pGPIOx == GPIOA){
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a4e      	ldr	r2, [pc, #312]	@ (80003d4 <GPIO_PeriClockControl+0x150>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d106      	bne.n	80002ac <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800029e:	4b4e      	ldr	r3, [pc, #312]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	4a4d      	ldr	r2, [pc, #308]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80002a4:	f043 0304 	orr.w	r3, r3, #4
 80002a8:	6193      	str	r3, [r2, #24]
		} else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();
		}

	}
}
 80002aa:	e08d      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOB){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a4b      	ldr	r2, [pc, #300]	@ (80003dc <GPIO_PeriClockControl+0x158>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d106      	bne.n	80002c2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002b4:	4b48      	ldr	r3, [pc, #288]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a47      	ldr	r2, [pc, #284]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80002ba:	f043 0308 	orr.w	r3, r3, #8
 80002be:	6193      	str	r3, [r2, #24]
}
 80002c0:	e082      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOC){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a46      	ldr	r2, [pc, #280]	@ (80003e0 <GPIO_PeriClockControl+0x15c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002ca:	4b43      	ldr	r3, [pc, #268]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a42      	ldr	r2, [pc, #264]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80002d0:	f043 0310 	orr.w	r3, r3, #16
 80002d4:	6193      	str	r3, [r2, #24]
}
 80002d6:	e077      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOD){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a42      	ldr	r2, [pc, #264]	@ (80003e4 <GPIO_PeriClockControl+0x160>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002e0:	4b3d      	ldr	r3, [pc, #244]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a3c      	ldr	r2, [pc, #240]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80002e6:	f043 0320 	orr.w	r3, r3, #32
 80002ea:	6193      	str	r3, [r2, #24]
}
 80002ec:	e06c      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOE){
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a3d      	ldr	r2, [pc, #244]	@ (80003e8 <GPIO_PeriClockControl+0x164>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80002f6:	4b38      	ldr	r3, [pc, #224]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a37      	ldr	r2, [pc, #220]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80002fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000300:	6193      	str	r3, [r2, #24]
}
 8000302:	e061      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOF){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a39      	ldr	r2, [pc, #228]	@ (80003ec <GPIO_PeriClockControl+0x168>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800030c:	4b32      	ldr	r3, [pc, #200]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a31      	ldr	r2, [pc, #196]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 8000312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000316:	6193      	str	r3, [r2, #24]
}
 8000318:	e056      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOG){
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a34      	ldr	r2, [pc, #208]	@ (80003f0 <GPIO_PeriClockControl+0x16c>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d152      	bne.n	80003c8 <GPIO_PeriClockControl+0x144>
			GPIOG_PCLK_EN();
 8000322:	4b2d      	ldr	r3, [pc, #180]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a2c      	ldr	r2, [pc, #176]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 8000328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800032c:	6193      	str	r3, [r2, #24]
}
 800032e:	e04b      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		if(pGPIOx == GPIOA){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a28      	ldr	r2, [pc, #160]	@ (80003d4 <GPIO_PeriClockControl+0x150>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0xc2>
			GPIOA_PCLK_DI();
 8000338:	4b27      	ldr	r3, [pc, #156]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a26      	ldr	r2, [pc, #152]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 800033e:	f023 0304 	bic.w	r3, r3, #4
 8000342:	6193      	str	r3, [r2, #24]
}
 8000344:	e040      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOB){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a24      	ldr	r2, [pc, #144]	@ (80003dc <GPIO_PeriClockControl+0x158>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0xd8>
			GPIOB_PCLK_DI();
 800034e:	4b22      	ldr	r3, [pc, #136]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a21      	ldr	r2, [pc, #132]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 8000354:	f023 0308 	bic.w	r3, r3, #8
 8000358:	6193      	str	r3, [r2, #24]
}
 800035a:	e035      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOC){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a20      	ldr	r2, [pc, #128]	@ (80003e0 <GPIO_PeriClockControl+0x15c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <GPIO_PeriClockControl+0xee>
			GPIOC_PCLK_DI();
 8000364:	4b1c      	ldr	r3, [pc, #112]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a1b      	ldr	r2, [pc, #108]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 800036a:	f023 0310 	bic.w	r3, r3, #16
 800036e:	6193      	str	r3, [r2, #24]
}
 8000370:	e02a      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOD){
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a1b      	ldr	r2, [pc, #108]	@ (80003e4 <GPIO_PeriClockControl+0x160>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0x104>
			GPIOD_PCLK_DI();
 800037a:	4b17      	ldr	r3, [pc, #92]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a16      	ldr	r2, [pc, #88]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 8000380:	f023 0320 	bic.w	r3, r3, #32
 8000384:	6193      	str	r3, [r2, #24]
}
 8000386:	e01f      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOE){
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a17      	ldr	r2, [pc, #92]	@ (80003e8 <GPIO_PeriClockControl+0x164>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0x11a>
			GPIOE_PCLK_DI();
 8000390:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a10      	ldr	r2, [pc, #64]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 8000396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800039a:	6193      	str	r3, [r2, #24]
}
 800039c:	e014      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOF){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a12      	ldr	r2, [pc, #72]	@ (80003ec <GPIO_PeriClockControl+0x168>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0x130>
			GPIOF_PCLK_DI();
 80003a6:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a0b      	ldr	r2, [pc, #44]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80003ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003b0:	6193      	str	r3, [r2, #24]
}
 80003b2:	e009      	b.n	80003c8 <GPIO_PeriClockControl+0x144>
		} else if(pGPIOx == GPIOG){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	@ (80003f0 <GPIO_PeriClockControl+0x16c>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d105      	bne.n	80003c8 <GPIO_PeriClockControl+0x144>
			GPIOG_PCLK_DI();
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a05      	ldr	r2, [pc, #20]	@ (80003d8 <GPIO_PeriClockControl+0x154>)
 80003c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003c6:	6193      	str	r3, [r2, #24]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40010800 	.word	0x40010800
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010c00 	.word	0x40010c00
 80003e0:	40011000 	.word	0x40011000
 80003e4:	40011400 	.word	0x40011400
 80003e8:	40011800 	.word	0x40011800
 80003ec:	40011c00 	.word	0x40011c00
 80003f0:	40012000 	.word	0x40012000

080003f4 <GPIO_Init>:
 * @return						- none
 *
 * @Note						- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b087      	sub	sp, #28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	uint8_t index1,index2;
	index1 	= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	08db      	lsrs	r3, r3, #3
 8000402:	75fb      	strb	r3, [r7, #23]
	index2 	= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	f003 0307 	and.w	r3, r3, #7
 800040c:	75bb      	strb	r3, [r7, #22]
	//1. Configure the mode of the gpio pin
	if(	pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=  GPIO_MODE_OUT_50MHz){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	795b      	ldrb	r3, [r3, #5]
 8000412:	2b03      	cmp	r3, #3
 8000414:	d826      	bhi.n	8000464 <GPIO_Init+0x70>
		//The non-interrupt mode
		temp   	= pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (4 * index2);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	795b      	ldrb	r3, [r3, #5]
 800041a:	461a      	mov	r2, r3
 800041c:	7dbb      	ldrb	r3, [r7, #22]
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CR[index1] &= ~(0x3<<(4 * index2));					//clear bit
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	7dfa      	ldrb	r2, [r7, #23]
 800042c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000430:	7dbb      	ldrb	r3, [r7, #22]
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	2203      	movs	r2, #3
 8000436:	fa02 f303 	lsl.w	r3, r2, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	4618      	mov	r0, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	7dfa      	ldrb	r2, [r7, #23]
 8000444:	4001      	ands	r1, r0
 8000446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->CR[index1] |= temp;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	7dfa      	ldrb	r2, [r7, #23]
 8000450:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	7dfa      	ldrb	r2, [r7, #23]
 800045a:	68f9      	ldr	r1, [r7, #12]
 800045c:	4301      	orrs	r1, r0
 800045e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000462:	e0a8      	b.n	80005b6 <GPIO_Init+0x1c2>

	} else {
		//The interrupt mode
		if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT ){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	2b04      	cmp	r3, #4
 800046a:	d117      	bne.n	800049c <GPIO_Init+0xa8>
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800046c:	4b69      	ldr	r3, [pc, #420]	@ (8000614 <GPIO_Init+0x220>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	7912      	ldrb	r2, [r2, #4]
 8000474:	4611      	mov	r1, r2
 8000476:	2201      	movs	r2, #1
 8000478:	408a      	lsls	r2, r1
 800047a:	4611      	mov	r1, r2
 800047c:	4a65      	ldr	r2, [pc, #404]	@ (8000614 <GPIO_Init+0x220>)
 800047e:	430b      	orrs	r3, r1
 8000480:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000482:	4b64      	ldr	r3, [pc, #400]	@ (8000614 <GPIO_Init+0x220>)
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	43d2      	mvns	r2, r2
 8000492:	4611      	mov	r1, r2
 8000494:	4a5f      	ldr	r2, [pc, #380]	@ (8000614 <GPIO_Init+0x220>)
 8000496:	400b      	ands	r3, r1
 8000498:	6093      	str	r3, [r2, #8]
 800049a:	e035      	b.n	8000508 <GPIO_Init+0x114>

		} else if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT ){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	795b      	ldrb	r3, [r3, #5]
 80004a0:	2b05      	cmp	r3, #5
 80004a2:	d117      	bne.n	80004d4 <GPIO_Init+0xe0>
			//1. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000614 <GPIO_Init+0x220>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	7912      	ldrb	r2, [r2, #4]
 80004ac:	4611      	mov	r1, r2
 80004ae:	2201      	movs	r2, #1
 80004b0:	408a      	lsls	r2, r1
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a57      	ldr	r2, [pc, #348]	@ (8000614 <GPIO_Init+0x220>)
 80004b6:	430b      	orrs	r3, r1
 80004b8:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004ba:	4b56      	ldr	r3, [pc, #344]	@ (8000614 <GPIO_Init+0x220>)
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	43d2      	mvns	r2, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a51      	ldr	r2, [pc, #324]	@ (8000614 <GPIO_Init+0x220>)
 80004ce:	400b      	ands	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]
 80004d2:	e019      	b.n	8000508 <GPIO_Init+0x114>

		} else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	2b06      	cmp	r3, #6
 80004da:	d115      	bne.n	8000508 <GPIO_Init+0x114>
			//1. configure the FTRS and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000614 <GPIO_Init+0x220>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	7912      	ldrb	r2, [r2, #4]
 80004e4:	4611      	mov	r1, r2
 80004e6:	2201      	movs	r2, #1
 80004e8:	408a      	lsls	r2, r1
 80004ea:	4611      	mov	r1, r2
 80004ec:	4a49      	ldr	r2, [pc, #292]	@ (8000614 <GPIO_Init+0x220>)
 80004ee:	430b      	orrs	r3, r1
 80004f0:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004f2:	4b48      	ldr	r3, [pc, #288]	@ (8000614 <GPIO_Init+0x220>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	4611      	mov	r1, r2
 8000502:	4a44      	ldr	r2, [pc, #272]	@ (8000614 <GPIO_Init+0x220>)
 8000504:	430b      	orrs	r3, r1
 8000506:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in AFIO_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	089b      	lsrs	r3, r3, #2
 800050e:	757b      	strb	r3, [r7, #21]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	f003 0303 	and.w	r3, r3, #3
 8000518:	753b      	strb	r3, [r7, #20]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a3e      	ldr	r2, [pc, #248]	@ (8000618 <GPIO_Init+0x224>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d02b      	beq.n	800057c <GPIO_Init+0x188>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a3c      	ldr	r2, [pc, #240]	@ (800061c <GPIO_Init+0x228>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d024      	beq.n	8000578 <GPIO_Init+0x184>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a3b      	ldr	r2, [pc, #236]	@ (8000620 <GPIO_Init+0x22c>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d01d      	beq.n	8000574 <GPIO_Init+0x180>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a39      	ldr	r2, [pc, #228]	@ (8000624 <GPIO_Init+0x230>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d016      	beq.n	8000570 <GPIO_Init+0x17c>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a38      	ldr	r2, [pc, #224]	@ (8000628 <GPIO_Init+0x234>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d00f      	beq.n	800056c <GPIO_Init+0x178>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a36      	ldr	r2, [pc, #216]	@ (800062c <GPIO_Init+0x238>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d008      	beq.n	8000568 <GPIO_Init+0x174>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a35      	ldr	r2, [pc, #212]	@ (8000630 <GPIO_Init+0x23c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d101      	bne.n	8000564 <GPIO_Init+0x170>
 8000560:	2306      	movs	r3, #6
 8000562:	e00c      	b.n	800057e <GPIO_Init+0x18a>
 8000564:	2300      	movs	r3, #0
 8000566:	e00a      	b.n	800057e <GPIO_Init+0x18a>
 8000568:	2305      	movs	r3, #5
 800056a:	e008      	b.n	800057e <GPIO_Init+0x18a>
 800056c:	2304      	movs	r3, #4
 800056e:	e006      	b.n	800057e <GPIO_Init+0x18a>
 8000570:	2303      	movs	r3, #3
 8000572:	e004      	b.n	800057e <GPIO_Init+0x18a>
 8000574:	2302      	movs	r3, #2
 8000576:	e002      	b.n	800057e <GPIO_Init+0x18a>
 8000578:	2301      	movs	r3, #1
 800057a:	e000      	b.n	800057e <GPIO_Init+0x18a>
 800057c:	2300      	movs	r3, #0
 800057e:	74fb      	strb	r3, [r7, #19]

		AFIO_PCLK_EN();
 8000580:	4b2c      	ldr	r3, [pc, #176]	@ (8000634 <GPIO_Init+0x240>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a2b      	ldr	r2, [pc, #172]	@ (8000634 <GPIO_Init+0x240>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6193      	str	r3, [r2, #24]
		AFIO->EXTICR[temp1] = portcode << (temp2*4);
 800058c:	7cfa      	ldrb	r2, [r7, #19]
 800058e:	7d3b      	ldrb	r3, [r7, #20]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	fa02 f103 	lsl.w	r1, r2, r3
 8000596:	4a28      	ldr	r2, [pc, #160]	@ (8000638 <GPIO_Init+0x244>)
 8000598:	7d7b      	ldrb	r3, [r7, #21]
 800059a:	3302      	adds	r3, #2
 800059c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery IMR

		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <GPIO_Init+0x220>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	7912      	ldrb	r2, [r2, #4]
 80005a8:	4611      	mov	r1, r2
 80005aa:	2201      	movs	r2, #1
 80005ac:	408a      	lsls	r2, r1
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a18      	ldr	r2, [pc, #96]	@ (8000614 <GPIO_Init+0x220>)
 80005b2:	430b      	orrs	r3, r1
 80005b4:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
	//2. configure CNF
	temp   	= pGPIOHandle->GPIO_PinConfig.GPIO_CNF << (4 * index2 + 2);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	799b      	ldrb	r3, [r3, #6]
 80005be:	461a      	mov	r2, r3
 80005c0:	7dbb      	ldrb	r3, [r7, #22]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	3302      	adds	r3, #2
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->CR[index1] &= ~(0x3<<(4 * index2+2)); 						//clear bit
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	7dfa      	ldrb	r2, [r7, #23]
 80005d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005d6:	7dbb      	ldrb	r3, [r7, #22]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	3302      	adds	r3, #2
 80005dc:	2203      	movs	r2, #3
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	4618      	mov	r0, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	7dfa      	ldrb	r2, [r7, #23]
 80005ec:	4001      	ands	r1, r0
 80005ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIOHandle->pGPIOx->CR[index1] |= temp;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	7dfa      	ldrb	r2, [r7, #23]
 80005f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	7dfa      	ldrb	r2, [r7, #23]
 8000602:	68f9      	ldr	r1, [r7, #12]
 8000604:	4301      	orrs	r1, r0
 8000606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800060a:	bf00      	nop
 800060c:	371c      	adds	r7, #28
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	40010400 	.word	0x40010400
 8000618:	40010800 	.word	0x40010800
 800061c:	40010c00 	.word	0x40010c00
 8000620:	40011000 	.word	0x40011000
 8000624:	40011400 	.word	0x40011400
 8000628:	40011800 	.word	0x40011800
 800062c:	40011c00 	.word	0x40011c00
 8000630:	40012000 	.word	0x40012000
 8000634:	40021000 	.word	0x40021000
 8000638:	40010000 	.word	0x40010000

0800063c <GPIO_ToggleOutputPin>:
 * @return						- none
 *
 * @Note						- none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx,  uint8_t PinNumber)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<PinNumber);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	78fa      	ldrb	r2, [r7, #3]
 800064e:	2101      	movs	r1, #1
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	405a      	eors	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	60da      	str	r2, [r3, #12]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <GPIO_IRQInterruptConfig>:
 * @return						- none
 *
 * @Note						- none
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d133      	bne.n	80006e2 <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31) //0 to 31
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b1f      	cmp	r3, #31
 800067e:	d80a      	bhi.n	8000696 <GPIO_IRQInterruptConfig+0x32>
		{
			// program ISER0 register
			*NVIC_ISER0 |= (1<<IRQNumber);
 8000680:	4b34      	ldr	r3, [pc, #208]	@ (8000754 <GPIO_IRQInterruptConfig+0xf0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	79fa      	ldrb	r2, [r7, #7]
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	4611      	mov	r1, r2
 800068e:	4a31      	ldr	r2, [pc, #196]	@ (8000754 <GPIO_IRQInterruptConfig+0xf0>)
 8000690:	430b      	orrs	r3, r1
 8000692:	6013      	str	r3, [r2, #0]
		{
			//program ISER2 register
			*NVIC_ICER2 |= (1<< (IRQNumber%64));
		}
	}
}
 8000694:	e059      	b.n	800074a <GPIO_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64) //32 to 63
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b1f      	cmp	r3, #31
 800069a:	d90f      	bls.n	80006bc <GPIO_IRQInterruptConfig+0x58>
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b3f      	cmp	r3, #63	@ 0x3f
 80006a0:	d80c      	bhi.n	80006bc <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber%32));
 80006a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <GPIO_IRQInterruptConfig+0xf4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	f002 021f 	and.w	r2, r2, #31
 80006ac:	2101      	movs	r1, #1
 80006ae:	fa01 f202 	lsl.w	r2, r1, r2
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a28      	ldr	r2, [pc, #160]	@ (8000758 <GPIO_IRQInterruptConfig+0xf4>)
 80006b6:	430b      	orrs	r3, r1
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	e046      	b.n	800074a <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 68)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b3f      	cmp	r3, #63	@ 0x3f
 80006c0:	d943      	bls.n	800074a <GPIO_IRQInterruptConfig+0xe6>
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b43      	cmp	r3, #67	@ 0x43
 80006c6:	d840      	bhi.n	800074a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1<< (IRQNumber%64));
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <GPIO_IRQInterruptConfig+0xf8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80006d2:	2101      	movs	r1, #1
 80006d4:	fa01 f202 	lsl.w	r2, r1, r2
 80006d8:	4611      	mov	r1, r2
 80006da:	4a20      	ldr	r2, [pc, #128]	@ (800075c <GPIO_IRQInterruptConfig+0xf8>)
 80006dc:	430b      	orrs	r3, r1
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	e033      	b.n	800074a <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31) //0 to 31
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b1f      	cmp	r3, #31
 80006e6:	d80a      	bhi.n	80006fe <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1<<IRQNumber);
 80006e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <GPIO_IRQInterruptConfig+0xfc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	79fa      	ldrb	r2, [r7, #7]
 80006ee:	2101      	movs	r1, #1
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000760 <GPIO_IRQInterruptConfig+0xfc>)
 80006f8:	430b      	orrs	r3, r1
 80006fa:	6013      	str	r3, [r2, #0]
}
 80006fc:	e025      	b.n	800074a <GPIO_IRQInterruptConfig+0xe6>
		} else if(IRQNumber > 31 && IRQNumber < 64) //32 to 63
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b1f      	cmp	r3, #31
 8000702:	d90f      	bls.n	8000724 <GPIO_IRQInterruptConfig+0xc0>
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b3f      	cmp	r3, #63	@ 0x3f
 8000708:	d80c      	bhi.n	8000724 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber%32));
 800070a:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <GPIO_IRQInterruptConfig+0x100>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	79fa      	ldrb	r2, [r7, #7]
 8000710:	f002 021f 	and.w	r2, r2, #31
 8000714:	2101      	movs	r1, #1
 8000716:	fa01 f202 	lsl.w	r2, r1, r2
 800071a:	4611      	mov	r1, r2
 800071c:	4a11      	ldr	r2, [pc, #68]	@ (8000764 <GPIO_IRQInterruptConfig+0x100>)
 800071e:	430b      	orrs	r3, r1
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	e012      	b.n	800074a <GPIO_IRQInterruptConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 68)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b3f      	cmp	r3, #63	@ 0x3f
 8000728:	d90f      	bls.n	800074a <GPIO_IRQInterruptConfig+0xe6>
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b43      	cmp	r3, #67	@ 0x43
 800072e:	d80c      	bhi.n	800074a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1<< (IRQNumber%64));
 8000730:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <GPIO_IRQInterruptConfig+0x104>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800073a:	2101      	movs	r1, #1
 800073c:	fa01 f202 	lsl.w	r2, r1, r2
 8000740:	4611      	mov	r1, r2
 8000742:	4a09      	ldr	r2, [pc, #36]	@ (8000768 <GPIO_IRQInterruptConfig+0x104>)
 8000744:	430b      	orrs	r3, r1
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	e7ff      	b.n	800074a <GPIO_IRQInterruptConfig+0xe6>
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000e104 	.word	0xe000e104
 800075c:	e000e108 	.word	0xe000e108
 8000760:	e000e180 	.word	0xe000e180
 8000764:	e000e184 	.word	0xe000e184
 8000768:	e000e188 	.word	0xe000e188

0800076c <GPIO_IRQPriorityConfig>:
 * @return						- none
 *
 * @Note						- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	71fb      	strb	r3, [r7, #7]
	//1.first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	089b      	lsrs	r3, r3, #2
 800077c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f003 0303 	and.w	r3, r3, #3
 8000784:	73bb      	strb	r3, [r7, #14]


	uint8_t shift_amount = ( 8 * iprx_section)+ ( 8 - NO_PR_BITS_IMPLEMENTED );
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3304      	adds	r3, #4
 800078e:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << (8 * shift_amount));
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000798:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800079c:	6819      	ldr	r1, [r3, #0]
 800079e:	7b7b      	ldrb	r3, [r7, #13]
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	409a      	lsls	r2, r3
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80007ae:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]


}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <GPIO_IRQHandling>:
 * @return						- none
 *
 * @Note						- none
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber ))
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <GPIO_IRQHandling+0x3c>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	2101      	movs	r1, #1
 80007d2:	fa01 f202 	lsl.w	r2, r1, r2
 80007d6:	4013      	ands	r3, r2
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d009      	beq.n	80007f0 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber );
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <GPIO_IRQHandling+0x3c>)
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	79fa      	ldrb	r2, [r7, #7]
 80007e2:	2101      	movs	r1, #1
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <GPIO_IRQHandling+0x3c>)
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6153      	str	r3, [r2, #20]
	}
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40010400 	.word	0x40010400

08000800 <memset>:
 8000800:	4603      	mov	r3, r0
 8000802:	4402      	add	r2, r0
 8000804:	4293      	cmp	r3, r2
 8000806:	d100      	bne.n	800080a <memset+0xa>
 8000808:	4770      	bx	lr
 800080a:	f803 1b01 	strb.w	r1, [r3], #1
 800080e:	e7f9      	b.n	8000804 <memset+0x4>

08000810 <__libc_init_array>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	2600      	movs	r6, #0
 8000814:	4d0c      	ldr	r5, [pc, #48]	@ (8000848 <__libc_init_array+0x38>)
 8000816:	4c0d      	ldr	r4, [pc, #52]	@ (800084c <__libc_init_array+0x3c>)
 8000818:	1b64      	subs	r4, r4, r5
 800081a:	10a4      	asrs	r4, r4, #2
 800081c:	42a6      	cmp	r6, r4
 800081e:	d109      	bne.n	8000834 <__libc_init_array+0x24>
 8000820:	f000 f81a 	bl	8000858 <_init>
 8000824:	2600      	movs	r6, #0
 8000826:	4d0a      	ldr	r5, [pc, #40]	@ (8000850 <__libc_init_array+0x40>)
 8000828:	4c0a      	ldr	r4, [pc, #40]	@ (8000854 <__libc_init_array+0x44>)
 800082a:	1b64      	subs	r4, r4, r5
 800082c:	10a4      	asrs	r4, r4, #2
 800082e:	42a6      	cmp	r6, r4
 8000830:	d105      	bne.n	800083e <__libc_init_array+0x2e>
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f855 3b04 	ldr.w	r3, [r5], #4
 8000838:	4798      	blx	r3
 800083a:	3601      	adds	r6, #1
 800083c:	e7ee      	b.n	800081c <__libc_init_array+0xc>
 800083e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000842:	4798      	blx	r3
 8000844:	3601      	adds	r6, #1
 8000846:	e7f2      	b.n	800082e <__libc_init_array+0x1e>
 8000848:	08000870 	.word	0x08000870
 800084c:	08000870 	.word	0x08000870
 8000850:	08000870 	.word	0x08000870
 8000854:	08000874 	.word	0x08000874

08000858 <_init>:
 8000858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085a:	bf00      	nop
 800085c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800085e:	bc08      	pop	{r3}
 8000860:	469e      	mov	lr, r3
 8000862:	4770      	bx	lr

08000864 <_fini>:
 8000864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000866:	bf00      	nop
 8000868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800086a:	bc08      	pop	{r3}
 800086c:	469e      	mov	lr, r3
 800086e:	4770      	bx	lr
